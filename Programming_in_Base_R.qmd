---
title: "Programming in Base R"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Task 1: Basic Vector practice

1.  Create two vectors. One vector corresponding to the pre measurements and one to the post measurements.

```{r}
pre_meas <- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)
post_meas <- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)
```

2.  Assign names to the vector elements using the paste() function. Create the same names for each vector’s elements.

```{r}
names(pre_meas) <- paste("Subject", 1:20, sep = "_")
names(post_meas) <- paste("Subject", 1:20, sep = "_")
pre_meas
post_meas
```

3.  Calculate the change in blood pressure for each patient by subtracting post-treatment measurements from pre-treatment measurements.Save this calculation as a new object in R (also a vector).

```{r}
change <- pre_meas - post_meas
change
```

4.  Calculate the average decrease in blood pressure across all patients.

```{r}
mean(change)
```

5.  Determine which patients experienced a decrease in blood pressure after treatment (a positive change).

```{r}
which(change > 0)
```

6.  Subset the vector of differences to only return those that have a positive change.

```{r}
positive_change <- change[which(change > 0)]
positive_change
```

7.  Calculate the average decrease in blood pressure for those where the blood pressure decreased (positive change).

```{r}
mean(positive_change)
```

# Task 2: Basic Data Frame practice

1.  Create a data frame object with four columns corresponding to your data above: patient, pre_bp,post_bp, and diff_bp

```{r}
bp_df <- data.frame(patient = names(pre_meas), pre_bp = pre_meas, post_bp = post_meas, diff_bp = change, row.names = NULL)
bp_df
```

2.  Return only rows where the diff_bp column is negative.

```{r}
negative_diff <- subset(bp_df, diff_bp < 0)
negative_diff
```

3.  Add a new column to the data frame corresponding to TRUE if the post_bp is less than 120.

```{r}
bp_df$less_120_post <- bp_df$post_bp < 120
bp_df
```

4.  Finally, print the data frame out nicely in your final document by modifying the code below appropriately.

```{r}
knitr::kable(bp_df)
```

# Task 3: List practice

1.  Create a new data frame with this data in it that is similar to the data frame from task 2 (including the new column).

```{r}
pre_meas_placebo <- c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130)
post_meas_placebo <- c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124)
names(pre_meas_placebo) <- names(post_meas_placebo) <- paste("Subject", 1:10, sep = "_")
change_placebo <- pre_meas_placebo - post_meas_placebo
bp_df_placebo <- data.frame(patient = names(pre_meas_placebo), pre_bp = pre_meas_placebo, post_bp = post_meas_placebo, diff_bp = change_placebo, row.names = NULL)
bp_df_placebo$less_120_post <- bp_df_placebo$post_bp < 120
bp_df_placebo
```

2.  Now create and store a list with two elements:

    • 1st element named treatment and contains the first data frame you created.

    • 2nd element named placebo and contains the second data frame you created.

```{r}
my_list <- list(treatment = bp_df, placebo = bp_df_placebo)
my_list
```

3.  Access the first list element using three different types of syntax.

```{r}
my_list[1]
my_list[[1]]
my_list$treatment
```

4.  In one line, access the placebo data frame, pre_bp column.

```{r}
my_list[[2]]$pre_bp
```

# Task 4: Control Flow Practice

1.  First, create a new column in each data frame from above called status.

```{r}
my_list[[1]]$status <- character(20)
my_list[[2]]$status <- character(10)
```

2.  For the non-placebo data frame (within the list), create a for loop and use if/then/else logic to create the status column’s values.

```{r}
for (i in seq_along(my_list[[1]]$patient)) {
  if (my_list[[1]]$post_bp[i] > 130) {
    my_list[[1]]$status[i] = "high"
  } else if (my_list[[1]]$post_bp[i] > 120) {
    my_list[[1]]$status[i] = "borderline"
  } else {
    my_list[[1]]$status[i] = "optimal"
  } 
}
my_list[[1]]
```

3.  Repeat for the placebo data frame (within the list).

```{r}
for (i in seq_along(my_list[[2]]$patient)) {
  if (my_list[[2]]$post_bp[i] > 130) {
    my_list[[2]]$status[i] = "high"
  } else if (my_list[[2]]$post_bp[i] > 120) {
    my_list[[2]]$status[i] = "borderline"
  } else {
    my_list[[2]]$status[i] = "optimal"
  } 
}
my_list[[2]]
```

# Task 5: Function Writing

1.  Write a function that

-   takes in a list with two data frames in it (a treatment and a placebo data frame) as an argument. Give no default value.
-   takes in an R function (that would find a summary of a numeric column) with the default value being set to "mean" (notice this is a quoted string).
-   Finds the statistic of interest (as defined by the user input) for the pre, post, and diff columns of both data frames.
-   These six values should then be returned as a named list with meaningful names.

```{r}
summary_fun <- function (my_list, stat = "mean") {
  my_fun <- get(stat)
  my_summary <- c(my_fun(my_list$treatment$pre_bp),
                  my_fun(my_list$treatment$post_bp),
                  my_fun(my_list$treatment$diff_bp),
                  my_fun(my_list$placebo$pre_bp),
                  my_fun(my_list$placebo$post_bp),
                  my_fun(my_list$placebo$diff_bp))
  summary_name <- character(6)
  summary_name[1] <- paste(stat, "treatmemt", "pre", sep = "_")
  summary_name[2] <- paste(stat, "treatmemt", "post", sep = "_")
  summary_name[3] <- paste(stat, "treatmemt", "diff", sep = "_")
  summary_name[4] <- paste(stat, "placebo", "pre", sep = "_")
  summary_name[5] <- paste(stat, "placebo", "post", sep = "_")
  summary_name[6] <- paste(stat, "placebo", "diff", sep = "_")
  names(my_summary) <- summary_name
  my_summary <- as.list(my_summary)
  my_summary
}
```

-   Finally, apply your function to you list of data frames from previous. Use it without specifying your statistic, with specifying your statistic as "var", "sd", "min", and "max".

```{r}
summary_fun(my_list)
summary_fun(my_list, stat = "var")
summary_fun(my_list, stat = "sd")
summary_fun(my_list, stat = "min")
summary_fun(my_list, stat = "max")
```
